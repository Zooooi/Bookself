<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   
				   addedToStage="onEvent(event)">
	<fx:Declarations>
		<fx:String id="__path__"/>
		<s:Group id="__dragTarget__"/>
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="SELECT", type="Js.events.ProjectEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import spark.core.MaskType;
			
			import EPD.geom.Transforms;
			
			import Js.ctrl.EffectDrag;
			import Js.ctrl.EffectZoom;
			import Js.events.ProjectEvent;
			import Js.mdel.Files;
			import Js.mdel.XmlContent;
			
			[Bindable]private var sPath:String
			[Bindable]private var nW:uint
			[Bindable]private var nH:uint
			
			private const nPec:uint = 3
			private const nZoomTime:uint = 1
			
			
			private var nodeCtrl:XMLList
			
			
			private var nScaleMax:Number
			private var nScaleMin:Number
			private var nScaleStep:Number
			private var nScaleCurrent:Number
			
			private var effectZoom:EffectZoom
			private var effectDrag:EffectDrag
			
			private var nTime:Timer
			
			private var currentComp:IconButton
			private var currentNode:XMLList
			private var xmlComponent:XML 
			
			public function setNodePage(_id:uint):void
			{
				//初始传递数据
				nodeCtrl = XmlContent.getCurrentCtrlNode(_id)
				sPath  = __path__ + XmlContent.getCurrentPageNode(_id).@src
				xmlComponent = XmlContent.XML_COMPONENT
				initView()
			}
			
			
			public function action_Clear():void
			{
				sPath = null
			}
			
			protected function onComplete(event:Event):void
			{
				setTimeout(init,20)
			}
			
			private function init():void
			{
				//初始数据
				rest()
				nScaleMin = pic.scaleX
				nScaleMax = pic.scaleX * nPec
				nScaleStep = (nScaleMax -nScaleMin) / nZoomTime
				
				effectZoom = new EffectZoom(gr, focus)
				effectZoom.setZoomStep(0.1,0.1)
				effectZoom.setMinScale(nScaleMin,nScaleMin)
				effectZoom.setMaxScale(nScaleMax, nScaleMax)
				effectZoom.ZoomByMask()
			}
			
			
			protected function onResize(event:Event):void
			{
				setMaskSize()
			}
			
			private function setMaskSize():void
			{
				//mask大小
				nW = width-2
				nH = height-2
			}
			
			protected function onEvent(event:Event):void
			{
				//窗体缩放
				this.addEventListener(Event.RESIZE,onResize)
				nTime = new Timer(20)
				nTime.addEventListener(TimerEvent.TIMER,onZoom)
			}
			
			
			protected function onPaneMouseEvent(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.MOUSE_DOWN:
						nTime.start()
						break;
						
					case MouseEvent.MOUSE_UP:
						nTime.stop()
						break;
					
					case MouseEvent.CLICK:
						nTime.stop()
						effectZoom.reset()
						rest()
						break;
				}
			}
			
			private function rest():void
			{
				gr.scaleX=1
				gr.scaleY=1
				
				Transforms.scaleRect2([gr],focus.getRect(this))
				Transforms.alignRect2([gr],focus.getRect(this))
			}
			
			
			protected function onZoom(event:TimerEvent):void
			{
				if(effectZoom)effectZoom.ZoomIn()
			}
			
			protected function onGrMouseEvent(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.MOUSE_DOWN:
						gr.startDrag(false)
						stage.addEventListener(MouseEvent.MOUSE_UP,onGrMouseEvent)
						break;
					case MouseEvent.MOUSE_UP:
						gr.stopDrag()
						stage.removeEventListener(MouseEvent.MOUSE_UP,onGrMouseEvent)
						break
				}
			}
			
			public function getComponent(_item:IconButton):void
			{
				if (_item.hitTestObject(cDrag))
				{
					var _point:Point = cPane.globalToLocal(__dragTarget__.localToGlobal(new Point(_item.x,_item.y)))
					_item.x = _point.x
					_item.y = _point.y
					_item.$createID()
					
					_item.stopDrag()
					_item.addEventListener(MouseEvent.MOUSE_DOWN,onComponentMouseEvent)
					cPane.addElement(_item)
					xml_AddComponent(_item)
					
				}else{
					__dragTarget__.removeElement(_item)
				}
			}
			
			public function getResult():void
			{
				currentComp.x = currentNode.@x
				currentComp.y = currentNode.@y
				currentComp.width = currentNode.@width
				currentComp.height = currentNode.@height
			}
			
			protected function onComponentMouseEvent(event:MouseEvent):void
			{
				
				var _item:IconButton
				switch(event.type)
				{
					case MouseEvent.MOUSE_DOWN:
						stage.addEventListener(MouseEvent.MOUSE_UP,onComponentMouseEvent)
						_item = IconButton(event.currentTarget)
						_item.startDrag(false)
						xml_UpComponent(_item)
						break;
					case MouseEvent.MOUSE_UP:
						stage.removeEventListener(event.type,arguments.callee)
						currentComp.stopDrag()
						setTimeout(xml_UpComponent,30,currentComp)
						break
				}
				
			}
			
			
			private function xml_AddComponent(_item:IconButton):void
			{
				currentComp = _item
				//xml增加节点
				nodeCtrl.appendChild(_item.getXML())
				//xml_UpComponent(_item)
				setTimeout(xml_UpComponent,30,_item)
			}
			
			private function xml_UpComponent(_item:IconButton):void
			{
				//xml修改组件NODE
				currentComp = _item
				currentNode =nodeCtrl.children().(@id==currentComp.getID())
				currentNode.@x = _item.x
				currentNode.@y = _item.y
				currentNode.@width = _item.width
				currentNode.@height = _item.height
				doProjectEvent_Select()
			}
			
			private function initView():void
			{
				//放置组件
				cPane.removeAllElements()
				var _xmlListComponent:XMLList 
				
				for (var i:int = 0; i < nodeCtrl.children().length(); i++) 
				{
					_xmlListComponent = xmlComponent.children().(@componentID==nodeCtrl.children()[i].@componentID)
					
					for (var j:int = 0; j < nodeCtrl.children()[i].children().length(); j++) 
					{
						nodeCtrl.children()[i].children()[j]= _xmlListComponent.files.children()[j]
					}
						
					var _item:IconButton = new IconButton
					_item._path = Files.folder_components
					_item.$setData(nodeCtrl.children()[i])
					_item.addEventListener(MouseEvent.MOUSE_DOWN,onComponentMouseEvent)
					cPane.addElement(_item)
				}
			}
			
			public function getCurrentComponentNode():XMLList
			{
				//返回当前组件
				return currentNode
			}
			
			
			private function doProjectEvent_Select():void
			{
				dispatchEvent(new ProjectEvent(ProjectEvent.SELECT))
			}
			
			public function action_RemoveComplete():void
			{
				for (var i:int = 0; i < nodeCtrl.children().length(); i++) 
				{
					if (nodeCtrl.children()[i] == currentNode)
					{
						delete nodeCtrl.children()[i]
						cPane.removeElement(currentComp)
						currentNode = null
						currentComp = null
						break
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:Group width="100%" height="100%" cacheAsBitmap="true" mask="{focus}" maskType="{MaskType.CLIP}">
		<s:Group id="gr">
			<s:Image id="pic" source="{sPath}" complete="onComplete(event)" width="100%" height="100%"/>
			<s:BorderContainer width="{pic.width}" height="{pic.height}" id="cDrag" alpha="0.1" mouseDown="onGrMouseEvent(event)"/>
			<s:Group id="cPane" width="{pic.width}" height="{pic.height}" mouseEnabled="false"/>
		</s:Group>
		
			
	</s:Group>
	<s:Group id="focus" x="0" y="0" cacheAsBitmap="true" width="{nW}" height="{nH}">
		<s:Rect id="ellipse"  width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xFFFF00" />
			</s:fill>
		</s:Rect>    
	</s:Group>
	<s:Group width="{nW}" height="{nH}">
		<s:Button y="4" right="10" width="30" label="-" click="onPaneMouseEvent(event)" >
			
		</s:Button>
		<s:Button y="4" right="49" width="30" label="+" mouseDown="onPaneMouseEvent(event)" mouseUp="onPaneMouseEvent(event)">
			
		</s:Button>	
	</s:Group>
	
</s:BorderContainer>
