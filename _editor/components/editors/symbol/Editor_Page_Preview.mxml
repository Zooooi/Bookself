<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   addedToStage="onEvent(event)">
	<fx:Declarations>
		<s:Group id="__dragTarget__"/>
		
	</fx:Declarations>
	<fx:Metadata>
		[Event(name="SELECT", type="JsC.events.JEvent")]
		[Event(name="UPDATE", type="JsC.events.JEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import JsC.effects.EffectDrag;
			import JsC.effects.EffectScale;
			import JsC.events.JEvent;
			import JsC.geom.Transforms;
			
			import components.editors.symbol.subgroup.Editor_subgroup;
			import components.editors.symbol.subgroup.Editor_subgroup_PlayList_Button;
			import components.symbol.Buttons.IconButton;
			
			import jsProject.mdel.Files;
			import jsProject.mdel.NameDefine;
			import jsProject.mdel.XmlContent;
			
			import mx.events.FlexEvent;
			
			import spark.components.HSlider;
			import spark.core.MaskType;
			
			[Bindable]private var sPath:String
			[Bindable]private var nW:uint
			[Bindable]private var nH:uint
			
			private const nPec:uint = 4
			private const nZoomTime:uint = 1
			
			
			private var nodeCtrl:XMLList
			
			
			[Bindable]public var __scaleMax:Number
			[Bindable]public var __scaleMin:Number
			[Bindable]public var __scaleCurrent:Number
			private var nScaleStep:Number
			
			private var effectScale:EffectScale
			private var effectDrag:EffectDrag
			
			private var nTime:Timer
			
			private var currentComp:IconButton
			private var currentNode:XMLList
			private var rectHightLight:Rectangle
			
			
			public function setNodePage(_id:uint):void
			{
				//初始传递数据
				nodeCtrl = XmlContent.getCurrentCtrlNode(_id)
				sPath  = Files.folder_book_Pages + XmlContent.getCurrentPageNode(_id).@src
				initView()
			}
			
			
			public function action_Clear():void
			{
				sPath = null
				cPane.removeAllElements()
				cHightLight.graphics.clear()
				cHightLight.x = 0
				cHightLight.y = 0
				__scaleMin = NaN
			}
			
			protected function onComplete(event:Event):void
			{
				setTimeout(init,20)
			}
			
			private function init():void
			{
				//初始数据
				rest()
				__scaleMin = gr.scaleX

				__scaleMax = gr.scaleX * nPec
				nScaleStep = (__scaleMax -__scaleMin) / nZoomTime
				
				effectScale = new EffectScale(gr, focus.getRect(this))
				effectScale.setMinScale(__scaleMin,__scaleMin)
				effectScale.setMaxScale(__scaleMax, __scaleMax)
				effectScale.ZoomByMask()
				__scaleCurrent = __scaleMin
				cHightLight.graphics.clear()
			}
			
			
			protected function onResize(event:Event):void
			{
				setMaskSize()
			}
			
			private function setMaskSize():void
			{
				//mask大小
				nW = width-2
				nH = height-2
			}
			
			protected function onEvent(event:Event):void
			{
				//窗体缩放
				this.addEventListener(Event.RESIZE,onResize)
				nTime = new Timer(20)
				nTime.addEventListener(TimerEvent.TIMER,onZoom)
				
			}
			
			
			protected function onPaneMouseEvent(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.MOUSE_DOWN:
						nTime.start()
						break;
						
					case MouseEvent.MOUSE_UP:
						nTime.stop()
						break;
					
					case MouseEvent.CLICK:
						nTime.stop()
						effectScale.reset()
						rest()
						break;
				}
			}
			
			private function rest():void
			{
				gr.scaleX=1
				gr.scaleY=1
				
				Transforms.scaleRect2([gr],focus.getRect(this))
				Transforms.alignRect2([gr],focus.getRect(this))
			}
			
			
			protected function onZoom(event:TimerEvent):void
			{
				if(effectScale)effectScale.ZoomIn()
			}
			
			protected function onGrMouseEvent(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.MOUSE_DOWN:
						gr.startDrag(false)
						stage.addEventListener(MouseEvent.MOUSE_UP,onGrMouseEvent)
						break;
					case MouseEvent.MOUSE_UP:
						gr.stopDrag()
						stage.removeEventListener(MouseEvent.MOUSE_UP,onGrMouseEvent)
						break
				}
			}
			
			public function getComponent(_item:IconButton):void
			{
				if (_item.hitTestObject(cDrag))
				{
					var _point:Point = cPane.globalToLocal(__dragTarget__.localToGlobal(new Point(_item.x,_item.y)))
					_item.x = _point.x
					_item.y = _point.y
					_item.$createID()
					
					_item.stopDrag()
					_item.addEventListener(MouseEvent.MOUSE_DOWN,onComponentMouseEvent)
					cPane.addElement(_item)
					xml_AddComponent(_item)
				}else{
					__dragTarget__.removeElement(_item)
				}
			}
			
			
			public function getSubGroup(_item:Editor_subgroup):void
			{
				if (_item.hitTestObject(cDrag))
				{
					var _point:Point = cPane.globalToLocal(__dragTarget__.localToGlobal(new Point(_item.x,_item.y)))
					_item.$hitTestGroup = cDrag
					_item.x = _point.x
					_item.y = _point.y
					_item.stopDrag()
					_item.instCtrl()
					cPane.addElement(_item)
				}else{
					__dragTarget__.removeElement(_item)
				}
			}
			
			
			
			public function getResult():void
			{
				currentComp.x = currentNode.@x
				currentComp.y = currentNode.@y
				currentComp.width = currentNode.@width
				currentComp.height = currentNode.@height
			}
			
			protected function onComponentMouseEvent(event:MouseEvent):void
			{
				
				var _item:IconButton
				switch(event.type)
				{
					case MouseEvent.MOUSE_DOWN:
						stage.addEventListener(MouseEvent.MOUSE_UP,onComponentMouseEvent)
						_item = IconButton(event.currentTarget)
						_item.startDrag(false)
						xml_UpComponent(_item)
						break;
					case MouseEvent.MOUSE_UP:
						stage.removeEventListener(event.type,arguments.callee)
						currentComp.stopDrag()
						setTimeout(xml_UpComponent,30,currentComp)
						break
				}
				
			}
			
			
			private function xml_AddComponent(_item:IconButton):void
			{
				currentComp = _item
				//xml增加节点
				nodeCtrl.appendChild(_item.getXML())
				//xml_UpComponent(_item)
				setTimeout(xml_UpComponent,30,_item)
			}
			
			private function xml_UpComponent(_item:IconButton):void
			{
				//xml修改组件NODE
				currentComp = _item
				currentNode =nodeCtrl.children().(@id==currentComp.getID())
				currentNode.@x = _item.x
				currentNode.@y = _item.y
				currentNode.@width = _item.width
				currentNode.@height = _item.height
				doProjectEvent_Select()
			}
			
			private function initView():void
			{
				//放置组件
				cPane.removeAllElements()
				var _xmlListComponent:XMLList 
				var _xml:XML
				for (var i:int = 0; i < nodeCtrl.children().length(); i++) 
				{
					_xml = XmlContent.updataComponent(nodeCtrl.children()[i].@componentID,nodeCtrl.children()[i])
					
					var _item:IconButton = new IconButton
					_item._path = Files.folder_components
					_item.toolTip = "component"
					_item.$setIcon(_xml)
					_item.addEventListener(MouseEvent.MOUSE_DOWN,onComponentMouseEvent)
					cPane.addElement(_item)
				}
				
				
				
				var _subxml:XMLList = XmlContent.currentPageNode[NameDefine.KEY_FUNCTION_ROOT]
					
				if (_subxml)
				{
					var _sub:Editor_subgroup 
					for (var j:int = 0; j < _subxml.children().length(); j++) 
					{
						
						switch(String(_subxml.children()[j].@id))
						{
							case NameDefine.KEY_SUBGROUP_PLAYLIST:
							case NameDefine.KEY_SUBGROUP_SHOWHIDE:
								_sub = new Editor_subgroup_PlayList_Button
								_sub.$index = j
								_sub.instCtrl()
								_sub.$hitTestGroup = cDrag
								cPane.addElement(_sub)
								break;
						}
					}
				}
				
				
			}
			
			public function getCurrentComponentNode():XMLList
			{
				//返回当前组件
				return currentNode
			}
			
			
			private function doProjectEvent_Select():void
			{
				dispatchEvent(new JEvent(JEvent.SELECT))
			}
			
			public function action_RemoveComplete():void
			{
				for (var i:int = 0; i < nodeCtrl.children().length(); i++) 
				{
					if (nodeCtrl.children()[i] == currentNode)
					{
						delete nodeCtrl.children()[i]
						cPane.removeElement(currentComp)
						currentNode = null
						currentComp = null
						break
					}
				}
			}
			
			
			public function drawHightLight(_obj:Object):void
			{
				
				cHightLight.x = 0
				cHightLight.y = 0
				cHightLight.graphics.clear()
				if (_obj!=null)
				{
					
					var _x:Number = Number(_obj.x)
					var _y:Number = Number(_obj.y)
					var _width:Number = Number(_obj.width)
					var _height:Number = Number(_obj.height)
					var _alpha:Number = Number(_obj.alpha)
					var _color:uint = uint(_obj.color)
					cHightLight.x = _x
					cHightLight.y = _y
					cHightLight.graphics.beginFill(_color, _alpha);
					cHightLight.graphics.drawRect(0,0,_width,_height)
					cHightLight.graphics.endFill()
					
				}
				
				
			}
			
			protected function onHightMouseEvent(event:MouseEvent):void
			{
				switch(event.type)
				{
					case MouseEvent.MOUSE_DOWN:
						cHightLight.startDrag(false,new Rectangle(0,0,pic.width,pic.height))
						stage.addEventListener(MouseEvent.MOUSE_UP,onHightMouseEvent)
						break;
					
					case MouseEvent.MOUSE_UP:
						cHightLight.stopDrag()
						stage.removeEventListener(MouseEvent.MOUSE_UP,onHightMouseEvent)
						var _obj:Object = new Object
						_obj.x = cHightLight.x
						_obj.y = cHightLight.y
						var _event:JEvent = new JEvent(JEvent.UPDATE)
						_event.$setObject(_obj)
						dispatchEvent(_event)
						break;
				}
				
			}
			
			public function $onSliderEvent(event:Event):void
			{
				var _me:HSlider = HSlider(event.currentTarget)
				effectScale.setZoom(_me.value,_me.value)
			}
			 
		]]>
	</fx:Script>
	<s:Group width="100%" height="100%" cacheAsBitmap="true" mask="{focus}" maskType="{MaskType.CLIP}">
		<s:Group id="gr">
			<s:Image id="pic" source="{sPath}" complete="onComplete(event)" width="100%" height="100%"/>
			<s:BorderContainer  width="{pic.width}" height="{pic.height}" id="cDrag" alpha="0.3" mouseDown="onGrMouseEvent(event)"/>
			<s:Group id="cPane" width="{pic.width}" height="{pic.height}" mouseEnabled="false"/>
			<mx:UIComponent id="cHightLight"  blendMode="{BlendMode.MULTIPLY}" 
							mouseDown="onHightMouseEvent(event)"
							/>
		</s:Group>
		
			
	</s:Group>
	<s:Group id="focus" x="0" y="0" cacheAsBitmap="true" width="{nW}" height="{nH}">
		<s:Rect id="ellipse"  width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xFFFF00" />
			</s:fill>
		</s:Rect>    
	</s:Group>


	
</s:BorderContainer>
